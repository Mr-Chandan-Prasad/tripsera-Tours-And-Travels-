import{r as f}from"./vendor-wpXbf5jk.js";import{c as d,a as m}from"./index-B6nm7sb2.js";const S=new Map,h=5*60*1e3;function I(l,c="*",g){const[A,p]=f.useState([]),[r,a]=f.useState(!0),[o,s]=f.useState(null),t=f.useMemo(()=>`${l}-${c}-${JSON.stringify({})}`,[l,c,g]);f.useEffect(()=>{async function n(){try{a(!0);const e=S.get(t);if(e&&Date.now()-e.timestamp<h){p(e.data),s(null),a(!1);return}if(await d()){const w=await m.get(l,g)||[];p(w),s(null),S.set(t,{data:w,timestamp:Date.now()})}else throw new Error("API not available")}catch(e){s(e instanceof Error?e.message:"An error occurred"),console.error("Failed to fetch data from MySQL API:",e);try{const u=localStorage.getItem(l)||"[]";let y=JSON.parse(u);p(y||[]),console.log("Using localStorage fallback for",l)}catch(u){console.error("Fallback to localStorage also failed:",u)}}finally{a(!1)}}n()},[t,l,c,g]);const i=f.useCallback(async()=>{S.delete(t),a(!0);try{if(await d()){const u=await m.get(l,g)||[];p(u),s(null),S.set(t,{data:u,timestamp:Date.now()})}else throw new Error("API not available")}catch(n){s(n instanceof Error?n.message:"An error occurred"),console.error("Failed to refetch data from MySQL API:",n);try{const e=localStorage.getItem(l)||"[]";let u=JSON.parse(e);p(u||[])}catch(e){console.error("Fallback to localStorage also failed:",e)}}finally{a(!1)}},[t,l,g]);return{data:A,loading:r,error:o,refetch:i}}function b(){const[l,c]=f.useState(!1);return{insert:async(r,a)=>{try{c(!0);const o={...a,...r==="bookings"&&{payment_status:a.payment_status||"pending",amount:a.amount||0}};if(await d())return await m.create(r,o);throw new Error("API not available")}catch(o){const s=o instanceof Error?o.message:"An error occurred";console.error("Insert error:",s);try{const t=JSON.parse(localStorage.getItem(r)||"[]"),i={...a,id:Date.now().toString(),created_at:new Date().toISOString(),...r==="bookings"&&{payment_status:a.payment_status||"pending",amount:a.amount||0}},n=[...t,i];return localStorage.setItem(r,JSON.stringify(n)),console.log("Using localStorage fallback for insert"),i}catch(t){throw console.error("Fallback to localStorage also failed:",t),o}}finally{c(!1)}},update:async(r,a,o)=>{try{if(c(!0),await d())return await m.update(r,a,o);throw new Error("API not available")}catch(s){const t=s instanceof Error?s.message:"An error occurred";console.error("Update error:",t);try{const n=JSON.parse(localStorage.getItem(r)||"[]").map(e=>e.id===a?{...e,...o}:e);return localStorage.setItem(r,JSON.stringify(n)),console.log("Using localStorage fallback for update"),n.find(e=>e.id===a)}catch(i){throw console.error("Fallback to localStorage also failed:",i),s}}finally{c(!1)}},remove:async(r,a)=>{try{if(c(!0),await d())await m.delete(r,a);else throw new Error("API not available")}catch(o){const s=o instanceof Error?o.message:"An error occurred";console.error("Delete error:",s);try{const i=JSON.parse(localStorage.getItem(r)||"[]").filter(n=>n.id!==a);localStorage.setItem(r,JSON.stringify(i)),console.log("Using localStorage fallback for delete")}catch(t){throw console.error("Fallback to localStorage also failed:",t),o}}finally{c(!1)}},loading:l}}export{b as a,I as u};
